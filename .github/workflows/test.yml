name: Build ports with poudriere

#   /home/runner/work
#   ├── ccache
#   ├── distfiles
#   ├── freebsd-ports-test
#   │   └── freebsd-ports-test
#   └── poudriere
#       ├── data
#       ...

on:
  workflow_call:
    inputs:
      freebsd_versions:
        description: FreeBSD release version to build ports on.
        default: "14.0"
        required: false
        type: string
      freebsd_ports_ref:
        description: A ref of FreeBSD ports
        default: main
        required: false
        type: string

      maxjobs:
        description: Specify the number of jobs that will run in parallel for a bulk build.
        default: 1
        required: false
        type: number

jobs:
  test:
    runs-on: ubuntu-latest
    name: Build ports with poudriere
    steps:
    - uses: actions/checkout@v4

    - name: Restore packages cache
      uses: actions/cache/restore@v4
      id: cache-restore-packages
      with:
        path: /home/runner/work/poudriere/data/packages

        # key is mandatory, but we do not know the exact key, which is
        # generated only after the test finishes.
        key: cache-packages-

        # Instead, use prefix for the key, which result in using the latest
        # cache.
        restore-keys: |
          cache-packages-

    - name: Debug
      run: |
        # When no cache is found, the directory does not exist. Create the
        # path for that case.
        mkdir -p /home/runner/work/poudriere/data/packages
        tree /home/runner/work/poudriere/data/packages

    - name: Test in FreeBSD
      id: test
      uses: vmactions/freebsd-vm@v1
      with:
        release: ${{ matrix.freebsd_versions }}
        usesh: true
        sync: rsync
        copyback: true
        prepare: |
          # Install requried packages
          pkg install -y ports-mgmt/poudriere-devel devel/git sysutils/tree
          echo "pwd: `pwd`"
          tree -d .

          # Create necessary directories
          mkdir -p work/ccache work/poudriere work/distfiles work/poudriere/data/logs/bulk

          # minimum configuration for poudriere
          printf "# Automatically generated by a GitHub actions workflow.
          NO_ZFS=yes
          RESOLV_CONF=/etc/resolv.conf
          USE_PORTLINT=no
          DISTFILES_CACHE=/home/runner/work/distfiles
          CCACHE_DIR=/home/runner/work/ccache
          SVN_HOST=svn.FreeBSD.org
          GIT_PORTSURL=github.com/freebsd/freebsd-ports.git
          BASEFS=/home/runner/work/poudriere
          " >> /usr/local/etc/poudriere.conf
          echo "The contents of /usr/local/etc/poudriere.conf"
          cat /usr/local/etc/poudriere.conf

          # i.e. 140, 131
          VERSION=`echo ${{ inputs.freebsd_versions }} | tr -d '.'`
          ARCH="amd64"
          JAIL_NAME="${VERSION}${ARCH}"
          echo "VERSION=${VERSION}"
          echo "ARCH=${ARCH}"
          echo "JAIL_NAME=${JAIL_NAME}"

          poudriere ports -c -p default -m git+https -B "${{ inputs.freebsd_ports_ref }}"
          poudriere jail -c -j "${JAIL_NAME}" -m ftp -v "${{ inputs.freebsd_versions }}-RELEASE"

        run: |
          set -e -x
          TEST_RESULT=1
          echo "pwd: `pwd`"
          tree .

          # A list of ports to build
          ORIGINS=`find * -type d -depth 1`
          echo "ORIGINS: ${ORIGINS}"

          echo "Creating overlay."
          poudriere ports -c -p overlay -m null -M `pwd`
          echo "List of ports"
          poudriere ports -l
          echo "List of jails"
          poudriere jail -l

          VERSION=`echo "${{ inputs.freebsd_versions }}" | tr -d '.'`
          ARCH="amd64"
          JAIL_NAME="${VERSION}${ARCH}"
          echo "VERSION=${VERSION}"
          echo "ARCH=${ARCH}"
          echo "JAIL_NAME=${JAIL_NAME}"

          # Build all ports, including dependencies, but use packages when one
          # is available in the latest branch (-b). Always build ORIGINS (-C).
          # Add some tests (-t).
          echo "Starting build."
          poudriere bulk -j ${JAIL_NAME} -p default -O overlay -b latest -z default -t -C -J "${{ inputs.maxjobs }}" ${ORIGINS}

          poudriere status -fH
          poudriere status -f
          BULK_PATH=`poudriere status  -fH | cut -f 14`
          LOG_PATH="${BULK_PATH}/logs"
          tree ${LOG_PATH}

          ERROR_LOGS=`ls -1 "${LOG_PATH}/errors"`
          if [ ! -z "${ERROR_LOGS}" ]; then
            echo "Failed build logs: ${ERROR_LOGS}"
            for F in ${ERROR_LOGS}; do
              FILE="${LOG_PATH}/errors/${F}"
              if [ -f "${FILE}" ]; then
                echo "Error log: ${FILE}"
                echo "--------------------------------"
                cat "${FILE}"
                echo "--------------------------------"
              else
                echo "BUG: cannot find ${FILE}"
              fi
            done
          else
            TEST_RESULT=0
          fi

          # Remove system immutable flags. Some files in a jail are immutable,
          # and cannot be removed.
          chflags -R noschg /home/runner/work/poudriere/jails

          # Remove jails and ports, takes too long to sync them on host.
          rm -rf /home/runner/work/poudriere/jails /home/runner/work/poudriere/ports

          # Fail the job as poudriere does not exit with non-zero when a build
          # fails.
          if [ ${TEST_RESULT} -eq 1 ]; then
            false
          fi


    - name: Upload logs
      uses: actions/upload-artifact@v4
      with:
        name: poudriere-logs-${{ github.sha }}-${{ inputs.freebsd_versions }}
        path: /home/runner/work/poudriere/data/logs


    - name: Get date
      id: date
      run: date +'DATE=%Y-%m-%d' >> "$GITHUB_OUTPUT"

    - name: Cache distfiles
      # Cache distfiles for one day. there is no appropriate keys for ports
      # development. distfiles change when:
      #
      # * the ports tree is updated
      # * dependency changes
      # * sources and patches are updated
      #
      uses: actions/cache@v4
      with:
        path: /home/runner/work/distfiles
        key: ${{ steps.date.outputs.DATE }}


    - name: Create a hash file of packages
      run: |
        find /home/runner/work/poudriere/data/packages | sha256sum - > PACKAGES.sha256

    - name: Cache packages cache
      uses: actions/cache/save@v4
      with:
        path: /home/runner/work/poudriere/data/packages
        key: cache-packages-${{ hashFiles('PACKAGES.sha256') }}
