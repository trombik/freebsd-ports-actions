name: Build ports with poudriere

#   /home/runner/work
#   ├── ccache
#   ├── distfiles
#   ├── freebsd-ports-test
#   │   └── freebsd-ports-test
#   └── poudriere
#       ├── data
#       ...
#
# About caches
# ------------
#
# The GitHub Actions, vmactions/freebsd-vm@v1, uses rsync to copy files to and
# from the guest VM. The flags of rsync being used does not include --links,
# which does not preserve symlinks. poudriere does use symlinks to manage
# packages. As such, this workflow does not sorely rely on actions/cache. The
# workflow creates, and extract, the directories to cache.
on:
  workflow_call:
    inputs:
      freebsd_versions:
        description: FreeBSD release version to build ports on.
        default: "14.0"
        required: false
        type: string
      freebsd_ports_ref:
        description: A ref of FreeBSD ports
        default: main
        required: false
        type: string

jobs:
  test:
    runs-on: ubuntu-latest
    name: Build ports with poudriere
    steps:
    - uses: actions/checkout@v4

    - name: Restore packages cache
      uses: actions/cache/restore@v4
      id: cache-restore-packages
      with:

        # key is mandatory, but we do not know the exact key, which is
        # generated only after the test finishes.
        key: cache-packages-
        path: data.tgz

        # Instead, use prefix for the key, which result in using the latest
        # cache.
        restore-keys: |
          cache-packages-

    - name: Restore distfiles cache
      uses: actions/cache/restore@v4
      id: cache-restore-distfiles
      with:
        key: cache-distfiles-
        path: distfiles.tgz
        restore-keys: |
          cache-distfiles-

    - name: Restore ccache cache
      uses: actions/cache/restore@v4
      id: cache-restore-ccache
      with:
        key: cache-ccache-
        path: ccache.tgz
        restore-keys: |
          cache-ccache-

    - name: Debug
      run: |
        echo "pwd: `pwd`"
        tree -d
        # When no cache is found, the directory does not exist. Create the
        # path for that case.
        mkdir -p /home/runner/work/poudriere/data/packages

    - name: Select package branch
      id: branch-selector
      run: |
        PORTS_REF="${{ inputs.freebsd_ports_ref }}"
        PACKAGE_BRANCH="latest"

        if [ "${PORTS_REF}" = "quarterly" ]; then
          PACKAGE_BRANCH="quarterly"
          YEAR=`date +%Y`
          MONTH=`date +%m`
          N_QUARTER=$(expr ${MONTH} / 4 + 1)
          PORTS_REF="${YEAR}Q${N_QUARTER}"
        fi
        echo "PORTS_REF=${PORTS_REF}" >> "$GITHUB_OUTPUT"
        echo "PACKAGE_BRANCH=${PACKAGE_BRANCH}" >> "$GITHUB_OUTPUT"


    - name: Test in FreeBSD
      id: test
      uses: vmactions/freebsd-vm@v1
      with:
        release: ${{ matrix.freebsd_versions }}
        usesh: true
        sync: rsync
        copyback: true
        prepare: |
          # Install requried packages
          pkg install -y ports-mgmt/poudriere-devel devel/git sysutils/tree
          echo "pwd: `pwd`"
          tree -d .

          # Create necessary directories
          mkdir -p work/ccache work/poudriere work/distfiles work/poudriere/data/logs/bulk

          # minimum configuration for poudriere
          printf "# Automatically generated by a GitHub actions workflow.
          NO_ZFS=yes
          RESOLV_CONF=/etc/resolv.conf
          USE_PORTLINT=no
          DISTFILES_CACHE=/home/runner/work/distfiles
          CCACHE_DIR=/home/runner/work/ccache
          SVN_HOST=svn.FreeBSD.org
          GIT_PORTSURL=github.com/freebsd/freebsd-ports.git
          BASEFS=/home/runner/work/poudriere
          " >> /usr/local/etc/poudriere.conf

          echo "The contents of /usr/local/etc/poudriere.conf"
          cat /usr/local/etc/poudriere.conf

          # i.e. 140, 131
          VERSION=`echo ${{ inputs.freebsd_versions }} | tr -d '.'`
          ARCH="amd64"
          JAIL_NAME="${VERSION}${ARCH}"
          echo "VERSION=${VERSION}"
          echo "ARCH=${ARCH}"
          echo "JAIL_NAME=${JAIL_NAME}"

          poudriere ports -c -p default -m git+https -B "${{ steps.branch-selector.outputs.PORTS_REF }}"
          poudriere jail -c -j "${JAIL_NAME}" -m ftp -v "${{ inputs.freebsd_versions }}-RELEASE"

        run: |
          set -e -x
          TEST_RESULT=1
          echo "pwd: `pwd`"
          tree .

          # Extract data.tgz and distfiles.tgz
          if [ -f data.tgz ]; then
            tar -zxvf data.tgz -C /home/runner/work/poudriere/
            tree -a /home/runner/work/poudriere/data
            rm data.tgz
          fi
          if [ -f distfiles.tgz ]; then
            tar -zxvf distfiles.tgz -C /home/runner/work
            tree -a /home/runner/work/distfiles
            rm distfiles.tgz
          fi
          if [ -f ccache.tgz ]; then
            tar -zxvf ccache.tgz -C /home/runner/work
            tree -a /home/runner/work/ccache
            rm ccache.tgz
          fi

          # A list of ports to build
          ORIGINS=`find * -type d -depth 1`
          echo "ORIGINS: ${ORIGINS}"

          echo "Creating overlay."
          poudriere ports -c -p overlay -m null -M `pwd`
          echo "List of ports"
          poudriere ports -l
          echo "List of jails"
          poudriere jail -l

          VERSION=`echo "${{ inputs.freebsd_versions }}" | tr -d '.'`
          ARCH="amd64"
          JAIL_NAME="${VERSION}${ARCH}"
          echo "VERSION=${VERSION}"
          echo "ARCH=${ARCH}"
          echo "JAIL_NAME=${JAIL_NAME}"

          # Build all ports, including dependencies, but use packages when one
          # is available in the latest branch (-b). Always build ORIGINS (-C).
          # Add some tests (-t).
          #
          # Do not fail when the build is not successful because we would like
          # to see the error log, and cache files.
          echo "Starting build."
          poudriere bulk -j ${JAIL_NAME} -p default -O overlay -b "${{ steps.branch-selector.outputs.PACKAGE_BRANCH }}" -z default -t -C ${ORIGINS} || true

          poudriere status -fH
          poudriere status -f
          BULK_PATH=`poudriere status  -fH | cut -f 14`
          LOG_PATH="${BULK_PATH}/logs"
          tree ${LOG_PATH}

          ERROR_LOGS=`ls -1 "${LOG_PATH}/errors"`
          if [ ! -z "${ERROR_LOGS}" ]; then
            echo "Failed build logs: ${ERROR_LOGS}"
            for F in ${ERROR_LOGS}; do
              FILE="${LOG_PATH}/errors/${F}"
              if [ -f "${FILE}" ]; then
                echo "Error log: ${FILE}"
                echo "--------------------------------"
                cat "${FILE}"
                echo "--------------------------------"
              else
                echo "BUG: cannot find ${FILE}"
              fi
            done
          else
            TEST_RESULT=0
          fi

          # Remove system immutable flags. Some files in a jail are immutable,
          # and cannot be removed.
          chflags -R noschg /home/runner/work/poudriere/jails

          # Remove jails and ports, takes too long to sync them on host.
          rm -rf /home/runner/work/poudriere/jails /home/runner/work/poudriere/ports

          # Create an archive of `data` and `distfiles`
          tar -cz -C /home/runner/work/poudriere -f data.tgz data
          tar -cz -C /home/runner/work -f distfiles.tgz distfiles
          tar -cz -C /home/runner/work -f ccache.tgz ccache

          # Create a hash file of packages and distfiles
          find /home/runner/work/poudriere/data/packages | sha256 > PACKAGES.sha256
          find /home/runner/work/distfiles | sha256 > DISTFILES.sha256
          find /home/runner/work/ccache | sha256 > CCACHE.sha256
          tree `pwd`

          # Fail the job as poudriere does not exit with non-zero when a build
          # fails.
          if [ ${TEST_RESULT} -eq 1 ]; then
            false
          fi


    - name: Upload logs
      uses: actions/upload-artifact@v4
      with:
        name: poudriere-logs-${{ github.sha }}-${{ inputs.freebsd_versions }}
        path: /home/runner/work/poudriere/data/logs

    - name: Cache distfiles
      uses: actions/cache/save@v4
      with:
        path: distfiles.tgz
        key: cache-distfiles-${{ hashFiles('DISTFILES.sha256') }}

    - name: Cache ccache
      uses: actions/cache/save@v4
      with:
        path: ccache.tgz
        key: cache-ccache-${{ hashFiles('CCACHE.sha256') }}


    - name: Cache packages cache
      uses: actions/cache/save@v4
      with:
        path: data.tgz
        key: cache-packages-${{ hashFiles('PACKAGES.sha256') }}
